{"ast":null,"code":"import { STATE_CODES } from '../constants';\nimport moment from 'moment';\nconst months = {\n  '01': 'Jan',\n  '02': 'Feb',\n  '03': 'Mar',\n  '04': 'Apr',\n  '05': 'May',\n  '06': 'Jun',\n  '07': 'Jul',\n  '08': 'Aug',\n  '09': 'Sep',\n  '10': 'Oct',\n  '11': 'Nov',\n  '12': 'Dec'\n};\nexport const getStateName = code => {\n  return STATE_CODES[code.toUpperCase()];\n};\nexport const formatDate = unformattedDate => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const year = unformattedDate.slice(6, 10);\n  const time = unformattedDate.slice(11);\n  return `${year}-${month}-${day}T${time}+05:30`;\n};\nexport const formatDateAbsolute = unformattedDate => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const time = unformattedDate.slice(11);\n  return `${day} ${months[month]}, ${time.slice(0, 5)} IST`;\n};\n\nconst validateCTS = (data = []) => {\n  const dataTypes = ['dailyconfirmed', 'dailydeceased', 'dailyrecovered', 'totalconfirmed', 'totaldeceased', 'totalrecovered'];\n  return data.filter(d => dataTypes.every(dt => d[dt]) && d.date).filter(d => dataTypes.every(dt => Number(d[dt]) >= 0)).filter(d => {\n    // Skip data from the current day\n    const today = moment().utcOffset('+05:30');\n    return moment(d.date, 'DD MMMM').utcOffset('+05:30').isBefore(today, 'day');\n  });\n};\n\nexport const preprocessTimeseries = timeseries => {\n  return validateCTS(timeseries).map((stat, index) => ({\n    date: new Date(stat.date + ' 2020'),\n    totalconfirmed: +stat.totalconfirmed,\n    totalrecovered: +stat.totalrecovered,\n    totaldeceased: +stat.totaldeceased,\n    dailyconfirmed: +stat.dailyconfirmed,\n    dailyrecovered: +stat.dailyrecovered,\n    dailydeceased: +stat.dailydeceased,\n    // Active = Confimed - Recovered - Deceased\n    totalactive: +stat.totalconfirmed - +stat.totalrecovered - +stat.totaldeceased,\n    dailyactive: +stat.dailyconfirmed - +stat.dailyrecovered - +stat.dailydeceased\n  }));\n};\n/**\n * Returns the last `days` entries\n * @param {Array<Object>} timeseries\n * @param {number} days\n *\n * @return {Array<Object>}\n */\n\nexport function sliceTimeseriesFromEnd(timeseries, days) {\n  return timeseries.slice(-days);\n}\nexport const formatNumber = value => {\n  const numberFormatter = new Intl.NumberFormat('en-IN');\n  return isNaN(value) ? '-' : numberFormatter.format(value);\n};\nexport const parseStateTimeseries = ({\n  states_daily: data\n}) => {\n  const statewiseSeries = Object.keys(STATE_CODES).reduce((a, c) => {\n    a[c] = [];\n    return a;\n  }, {});\n  const today = moment().utcOffset('+05:30');\n\n  for (let i = 0; i < data.length; i += 3) {\n    const date = moment(data[i].date, 'DD-MMM-YY').utcOffset('+05:30'); // Skip data from the current day\n\n    if (date.isBefore(today, 'day')) {\n      Object.entries(statewiseSeries).forEach(([k, v]) => {\n        const stateCode = k.toLowerCase();\n        const prev = v[v.length - 1] || {}; // Parser\n\n        const dailyconfirmed = +data[i][stateCode] || 0;\n        const dailyrecovered = +data[i + 1][stateCode] || 0;\n        const dailydeceased = +data[i + 2][stateCode] || 0;\n        const totalconfirmed = +data[i][stateCode] + (prev.totalconfirmed || 0);\n        const totalrecovered = +data[i + 1][stateCode] + (prev.totalrecovered || 0);\n        const totaldeceased = +data[i + 2][stateCode] + (prev.totaldeceased || 0); // Push\n\n        v.push({\n          date: date.toDate(),\n          dailyconfirmed: dailyconfirmed,\n          dailyrecovered: dailyrecovered,\n          dailydeceased: dailydeceased,\n          totalconfirmed: totalconfirmed,\n          totalrecovered: totalrecovered,\n          totaldeceased: totaldeceased,\n          // Active = Confimed - Recovered - Deceased\n          totalactive: totalconfirmed - totalrecovered - totaldeceased,\n          dailyactive: dailyconfirmed - dailyrecovered - dailydeceased\n        });\n      });\n    }\n  }\n\n  return statewiseSeries;\n};\nexport const parseStateTestTimeseries = data => {\n  const stateCodeMap = Object.keys(STATE_CODES).reduce((ret, sc) => {\n    ret[STATE_CODES[sc]] = sc;\n    return ret;\n  }, {});\n  const testTimseries = Object.keys(STATE_CODES).reduce((ret, sc) => {\n    ret[sc] = [];\n    return ret;\n  }, {});\n  const today = moment();\n  data.forEach(d => {\n    const date = moment(d.updatedon, 'DD/MM/YYYY');\n    const totaltested = +d.totaltested;\n\n    if (date.isBefore(today, 'Date') && totaltested) {\n      const stateCode = stateCodeMap[d.state];\n      testTimseries[stateCode].push({\n        date: date.toDate(),\n        totaltested: totaltested\n      });\n    }\n  });\n  return testTimseries;\n};\nexport const parseTotalTestTimeseries = data => {\n  const testTimseries = [];\n  const today = moment();\n  data.forEach(d => {\n    const date = moment(d.updatetimestamp.split(' ')[0], 'DD/MM/YYYY');\n    const totaltested = +d.totalsamplestested;\n\n    if (date.isBefore(today, 'Date') && totaltested) {\n      testTimseries.push({\n        date: date.toDate(),\n        totaltested: totaltested\n      });\n    }\n  });\n  return testTimseries;\n};\nexport const mergeTimeseries = (ts1, ts2) => {\n  const tsRet = Object.assign({}, ts1);\n\n  for (const state in ts1) {\n    if (ts1.hasOwnProperty(state)) {\n      tsRet[state] = ts1[state].map(d1 => {\n        const testData = ts2[state].find(d2 => moment(d1.date).isSame(moment(d2.date), 'day'));\n        return {\n          totaltested: testData === null || testData === void 0 ? void 0 : testData.totaltested,\n          ...d1\n        };\n      });\n    }\n  }\n\n  return tsRet;\n};","map":{"version":3,"sources":["/Users/sonalgupta/Documents/research/Weather data/website/covid19india-react/src/utils/commonfunctions.js"],"names":["STATE_CODES","moment","months","getStateName","code","toUpperCase","formatDate","unformattedDate","day","slice","month","year","time","formatDateAbsolute","validateCTS","data","dataTypes","filter","d","every","dt","date","Number","today","utcOffset","isBefore","preprocessTimeseries","timeseries","map","stat","index","Date","totalconfirmed","totalrecovered","totaldeceased","dailyconfirmed","dailyrecovered","dailydeceased","totalactive","dailyactive","sliceTimeseriesFromEnd","days","formatNumber","value","numberFormatter","Intl","NumberFormat","isNaN","format","parseStateTimeseries","states_daily","statewiseSeries","Object","keys","reduce","a","c","i","length","entries","forEach","k","v","stateCode","toLowerCase","prev","push","toDate","parseStateTestTimeseries","stateCodeMap","ret","sc","testTimseries","updatedon","totaltested","state","parseTotalTestTimeseries","updatetimestamp","split","totalsamplestested","mergeTimeseries","ts1","ts2","tsRet","assign","hasOwnProperty","d1","testData","find","d2","isSame"],"mappings":"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","sourcesContent":["import {STATE_CODES} from '../constants';\n\nimport moment from 'moment';\n\nconst months = {\n  '01': 'Jan',\n  '02': 'Feb',\n  '03': 'Mar',\n  '04': 'Apr',\n  '05': 'May',\n  '06': 'Jun',\n  '07': 'Jul',\n  '08': 'Aug',\n  '09': 'Sep',\n  '10': 'Oct',\n  '11': 'Nov',\n  '12': 'Dec',\n};\n\nexport const getStateName = (code) => {\n  return STATE_CODES[code.toUpperCase()];\n};\n\nexport const formatDate = (unformattedDate) => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const year = unformattedDate.slice(6, 10);\n  const time = unformattedDate.slice(11);\n  return `${year}-${month}-${day}T${time}+05:30`;\n};\n\nexport const formatDateAbsolute = (unformattedDate) => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const time = unformattedDate.slice(11);\n  return `${day} ${months[month]}, ${time.slice(0, 5)} IST`;\n};\n\nconst validateCTS = (data = []) => {\n  const dataTypes = [\n    'dailyconfirmed',\n    'dailydeceased',\n    'dailyrecovered',\n    'totalconfirmed',\n    'totaldeceased',\n    'totalrecovered',\n  ];\n  return data\n    .filter((d) => dataTypes.every((dt) => d[dt]) && d.date)\n    .filter((d) => dataTypes.every((dt) => Number(d[dt]) >= 0))\n    .filter((d) => {\n      // Skip data from the current day\n      const today = moment().utcOffset('+05:30');\n      return moment(d.date, 'DD MMMM')\n        .utcOffset('+05:30')\n        .isBefore(today, 'day');\n    });\n};\n\nexport const preprocessTimeseries = (timeseries) => {\n  return validateCTS(timeseries).map((stat, index) => ({\n    date: new Date(stat.date + ' 2020'),\n    totalconfirmed: +stat.totalconfirmed,\n    totalrecovered: +stat.totalrecovered,\n    totaldeceased: +stat.totaldeceased,\n    dailyconfirmed: +stat.dailyconfirmed,\n    dailyrecovered: +stat.dailyrecovered,\n    dailydeceased: +stat.dailydeceased,\n    // Active = Confimed - Recovered - Deceased\n    totalactive:\n      +stat.totalconfirmed - +stat.totalrecovered - +stat.totaldeceased,\n    dailyactive:\n      +stat.dailyconfirmed - +stat.dailyrecovered - +stat.dailydeceased,\n  }));\n};\n\n/**\n * Returns the last `days` entries\n * @param {Array<Object>} timeseries\n * @param {number} days\n *\n * @return {Array<Object>}\n */\nexport function sliceTimeseriesFromEnd(timeseries, days) {\n  return timeseries.slice(-days);\n}\n\nexport const formatNumber = (value) => {\n  const numberFormatter = new Intl.NumberFormat('en-IN');\n  return isNaN(value) ? '-' : numberFormatter.format(value);\n};\n\nexport const parseStateTimeseries = ({states_daily: data}) => {\n  const statewiseSeries = Object.keys(STATE_CODES).reduce((a, c) => {\n    a[c] = [];\n    return a;\n  }, {});\n\n  const today = moment().utcOffset('+05:30');\n  for (let i = 0; i < data.length; i += 3) {\n    const date = moment(data[i].date, 'DD-MMM-YY').utcOffset('+05:30');\n    // Skip data from the current day\n    if (date.isBefore(today, 'day')) {\n      Object.entries(statewiseSeries).forEach(([k, v]) => {\n        const stateCode = k.toLowerCase();\n        const prev = v[v.length - 1] || {};\n        // Parser\n        const dailyconfirmed = +data[i][stateCode] || 0;\n        const dailyrecovered = +data[i + 1][stateCode] || 0;\n        const dailydeceased = +data[i + 2][stateCode] || 0;\n        const totalconfirmed = +data[i][stateCode] + (prev.totalconfirmed || 0);\n        const totalrecovered =\n          +data[i + 1][stateCode] + (prev.totalrecovered || 0);\n        const totaldeceased =\n          +data[i + 2][stateCode] + (prev.totaldeceased || 0);\n        // Push\n        v.push({\n          date: date.toDate(),\n          dailyconfirmed: dailyconfirmed,\n          dailyrecovered: dailyrecovered,\n          dailydeceased: dailydeceased,\n          totalconfirmed: totalconfirmed,\n          totalrecovered: totalrecovered,\n          totaldeceased: totaldeceased,\n          // Active = Confimed - Recovered - Deceased\n          totalactive: totalconfirmed - totalrecovered - totaldeceased,\n          dailyactive: dailyconfirmed - dailyrecovered - dailydeceased,\n        });\n      });\n    }\n  }\n\n  return statewiseSeries;\n};\n\nexport const parseStateTestTimeseries = (data) => {\n  const stateCodeMap = Object.keys(STATE_CODES).reduce((ret, sc) => {\n    ret[STATE_CODES[sc]] = sc;\n    return ret;\n  }, {});\n\n  const testTimseries = Object.keys(STATE_CODES).reduce((ret, sc) => {\n    ret[sc] = [];\n    return ret;\n  }, {});\n\n  const today = moment();\n  data.forEach((d) => {\n    const date = moment(d.updatedon, 'DD/MM/YYYY');\n    const totaltested = +d.totaltested;\n    if (date.isBefore(today, 'Date') && totaltested) {\n      const stateCode = stateCodeMap[d.state];\n      testTimseries[stateCode].push({\n        date: date.toDate(),\n        totaltested: totaltested,\n      });\n    }\n  });\n  return testTimseries;\n};\n\nexport const parseTotalTestTimeseries = (data) => {\n  const testTimseries = [];\n  const today = moment();\n  data.forEach((d) => {\n    const date = moment(d.updatetimestamp.split(' ')[0], 'DD/MM/YYYY');\n    const totaltested = +d.totalsamplestested;\n    if (date.isBefore(today, 'Date') && totaltested) {\n      testTimseries.push({\n        date: date.toDate(),\n        totaltested: totaltested,\n      });\n    }\n  });\n  return testTimseries;\n};\n\nexport const mergeTimeseries = (ts1, ts2) => {\n  const tsRet = Object.assign({}, ts1);\n  for (const state in ts1) {\n    if (ts1.hasOwnProperty(state)) {\n      tsRet[state] = ts1[state].map((d1) => {\n        const testData = ts2[state].find((d2) =>\n          moment(d1.date).isSame(moment(d2.date), 'day')\n        );\n        return {\n          totaltested: testData?.totaltested,\n          ...d1,\n        };\n      });\n    }\n  }\n  return tsRet;\n};\n"]},"metadata":{},"sourceType":"module"}