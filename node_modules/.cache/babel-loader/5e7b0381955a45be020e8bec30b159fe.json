{"ast":null,"code":"var _jsxFileName = \"/Users/sonalgupta/Documents/research/Weather data/website/covid19india-react/src/components/mapexplorer.js\";\nimport ChoroplethMap from './choropleth';\nimport { testedToolTip } from './tooltips';\nimport { MAP_TYPES, MAP_META } from '../constants';\nimport { formatDate, formatNumber } from '../utils/commonfunctions';\nimport { formatDistance, format, parse } from 'date-fns';\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport * as Icon from 'react-feather';\nimport { Link } from 'react-router-dom';\nimport { useLocalStorage } from 'react-use';\n\nconst getRegionFromState = state => {\n  if (!state) return;\n  const region = { ...state\n  };\n  if (!region.name) region.name = region.state;\n  return region;\n};\n\nconst getRegionFromDistrict = (districtData, name) => {\n  if (!districtData) return;\n  const region = { ...districtData\n  };\n  if (!region.name) region.name = name;\n  return region;\n};\n\nfunction MapExplorer({\n  mapMeta,\n  states,\n  stateDistrictWiseData,\n  stateTestData,\n  regionHighlighted,\n  onMapHighlightChange,\n  isCountryLoaded,\n  anchor,\n  setAnchor,\n  mapOptionProp\n}) {\n  var _testObj$totaltested;\n\n  const [selectedRegion, setSelectedRegion] = useState({});\n  const [panelRegion, setPanelRegion] = useState(getRegionFromState(states[0]));\n  const [currentHoveredRegion, setCurrentHoveredRegion] = useState(getRegionFromState(states[0]));\n  const [testObj, setTestObj] = useState({});\n  const [currentMap, setCurrentMap] = useState(mapMeta);\n  const [mapOption, setMapOption] = useLocalStorage('mapOption', 'active');\n  const [statistic, currentMapData] = useMemo(() => {\n    const dataTypes = ['confirmed', 'active', 'recovered', 'deceased'];\n    const statistic = dataTypes.reduce((acc, dtype) => {\n      acc[dtype] = {\n        total: 0,\n        max: 0\n      };\n      return acc;\n    }, {});\n    let currentMapData = {};\n\n    if (currentMap.mapType === MAP_TYPES.COUNTRY) {\n      currentMapData = states.reduce((acc, state) => {\n        if (state.state === 'Total') {\n          return acc;\n        }\n\n        acc[state.state] = {};\n        dataTypes.forEach(dtype => {\n          const typeCount = parseInt(state[dtype !== 'deceased' ? dtype : 'deaths']);\n          statistic[dtype].total += typeCount;\n\n          if (typeCount > statistic[dtype].max) {\n            statistic[dtype].max = typeCount;\n          }\n\n          acc[state.state][dtype] = typeCount;\n        });\n        return acc;\n      }, {});\n    } else if (currentMap.mapType === MAP_TYPES.STATE) {\n      const districtWiseData = (stateDistrictWiseData[currentMap.name] || {\n        districtData: {}\n      }).districtData;\n      currentMapData = Object.keys(districtWiseData).reduce((acc, district) => {\n        acc[district] = {};\n        dataTypes.forEach(dtype => {\n          const typeCount = parseInt(districtWiseData[district][dtype]);\n          statistic[dtype].total += typeCount;\n\n          if (typeCount > statistic[dtype].max) {\n            statistic[dtype].max = typeCount;\n          }\n\n          acc[district][dtype] = typeCount;\n        });\n        return acc;\n      }, {});\n    }\n\n    return [statistic, currentMapData];\n  }, [currentMap, states, stateDistrictWiseData]);\n  const setHoveredRegion = useCallback((name, currentMap) => {\n    if (currentMap.mapType === MAP_TYPES.COUNTRY) {\n      const region = getRegionFromState(states.find(state => name === state.state));\n      setCurrentHoveredRegion(region);\n      setPanelRegion(region);\n      onMapHighlightChange(region);\n    } else if (currentMap.mapType === MAP_TYPES.STATE) {\n      const state = stateDistrictWiseData[currentMap.name] || {\n        districtData: {}\n      };\n      let districtData = state.districtData[name];\n\n      if (!districtData) {\n        districtData = {\n          confirmed: 0,\n          active: 0,\n          recovered: 0,\n          deaths: 0\n        };\n      }\n\n      const currentHoveredRegion = getRegionFromDistrict(districtData, name);\n      const panelRegion = getRegionFromState(states.find(state => currentMap.name === state.state));\n      setPanelRegion(panelRegion);\n      currentHoveredRegion.statecode = panelRegion.statecode;\n      setCurrentHoveredRegion(currentHoveredRegion);\n      panelRegion.districtName = currentHoveredRegion.name;\n      if (onMapHighlightChange) onMapHighlightChange(panelRegion);\n    }\n  }, [states, stateDistrictWiseData, onMapHighlightChange]);\n  useEffect(() => {\n    if (mapOptionProp) setMapOption(mapOptionProp);\n  }, [mapOptionProp, setMapOption]);\n  useEffect(() => {\n    if (regionHighlighted === undefined || regionHighlighted === null) return;\n    const isState = !('district' in regionHighlighted);\n\n    if (isState) {\n      const newMap = MAP_META['India'];\n      setCurrentMap(newMap);\n      const region = getRegionFromState(regionHighlighted.state);\n      setHoveredRegion(region.name, newMap);\n      setSelectedRegion(region.name);\n    } else {\n      const newMap = MAP_META[regionHighlighted.state.state];\n\n      if (!newMap) {\n        return;\n      }\n\n      setCurrentMap(newMap);\n      setHoveredRegion(regionHighlighted.district, newMap);\n      setSelectedRegion(regionHighlighted.district);\n    }\n  }, [regionHighlighted, setHoveredRegion]);\n  const switchMapToState = useCallback(name => {\n    const newMap = MAP_META[name];\n\n    if (!newMap) {\n      return;\n    }\n\n    setCurrentMap(newMap);\n    setSelectedRegion(null);\n\n    if (newMap.mapType === MAP_TYPES.COUNTRY) {\n      setHoveredRegion(states[0].state, newMap);\n    } else if (newMap.mapType === MAP_TYPES.STATE) {\n      const {\n        districtData\n      } = stateDistrictWiseData[name] || {\n        districtData: {}\n      };\n      const topDistrict = Object.keys(districtData).filter(name => name !== 'Unknown').sort((a, b) => {\n        return districtData[b].confirmed - districtData[a].confirmed;\n      })[0];\n      setHoveredRegion(topDistrict, newMap);\n      setSelectedRegion(topDistrict);\n    }\n  }, [setHoveredRegion, stateDistrictWiseData, states]);\n  useEffect(() => {\n    setTestObj(stateTestData.find(obj => obj.state === panelRegion.name && obj.totaltested !== ''));\n  }, [panelRegion, stateTestData, testObj]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `MapExplorer fadeInUp ${anchor === 'mapexplorer' ? 'stickied' : ''}`,\n    style: {\n      animationDelay: '1.5s',\n      display: anchor === 'timeseries' ? 'none' : ''\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 5\n    }\n  }, window.innerWidth > 769 && /*#__PURE__*/React.createElement(\"div\", {\n    className: `anchor ${anchor === 'mapexplorer' ? 'stickied' : ''}`,\n    onClick: () => {\n      setAnchor(anchor === 'mapexplorer' ? null : 'mapexplorer');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Icon.Anchor, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }, currentMap.name, \" Map\"), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  }, window.innerWidth <= 769 ? 'Tap' : 'Hover', \" over a\", ' ', currentMap.mapType === MAP_TYPES.COUNTRY ? 'state/UT' : 'district', ' ', \"for more details\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-stats\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `stats fadeInUp ${mapOption === 'confirmed' ? 'focused' : ''}`,\n    style: {\n      animationDelay: '2s'\n    },\n    onClick: () => setMapOption('confirmed'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 11\n    }\n  }, window.innerWidth <= 769 ? 'Cnfmd' : 'Confirmed'), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }\n  }, formatNumber(panelRegion.confirmed)), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }\n  }, `+${formatNumber(panelRegion.deltaconfirmed)}`))), /*#__PURE__*/React.createElement(\"div\", {\n    className: `stats is-blue fadeInUp ${mapOption === 'active' ? 'focused' : ''}`,\n    style: {\n      animationDelay: '2.1s'\n    },\n    onClick: () => setMapOption('active'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 11\n    }\n  }, window.innerWidth <= 769 ? 'Actv' : 'Active'), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }\n  }, formatNumber(panelRegion.active)), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }\n  }, ` `))), /*#__PURE__*/React.createElement(\"div\", {\n    className: `stats is-green fadeInUp ${mapOption === 'recovered' ? 'focused' : ''}`,\n    style: {\n      animationDelay: '2.2s'\n    },\n    onClick: () => setMapOption('recovered'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 11\n    }\n  }, window.innerWidth <= 769 ? 'Rcvrd' : 'Recovered'), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }\n  }, formatNumber(panelRegion.recovered)), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  }, `+${formatNumber(panelRegion.deltarecovered)}`))), /*#__PURE__*/React.createElement(\"div\", {\n    className: `stats is-gray fadeInUp ${mapOption === 'deceased' ? 'focused' : ''}`,\n    style: {\n      animationDelay: '2.3s'\n    },\n    onClick: () => setMapOption('deceased'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 11\n    }\n  }, window.innerWidth <= 769 ? 'Dcsd' : 'Deceased'), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }\n  }, formatNumber(panelRegion.deaths)), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }\n  }, `+${formatNumber(panelRegion.deltadeaths)}`))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats is-purple tested fadeInUp\",\n    style: {\n      animationDelay: '2.4s'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 11\n    }\n  }, \"Tested\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 13\n    }\n  }, formatNumber(testObj === null || testObj === void 0 ? void 0 : testObj.totaltested))), /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"timestamp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 11\n    }\n  }, !isNaN(parse(testObj === null || testObj === void 0 ? void 0 : testObj.updatedon, 'dd/MM/yyyy', new Date())) ? `As of ${format(parse(testObj === null || testObj === void 0 ? void 0 : testObj.updatedon, 'dd/MM/yyyy', new Date()), 'dd MMM')}` : ''), (testObj === null || testObj === void 0 ? void 0 : (_testObj$totaltested = testObj.totaltested) === null || _testObj$totaltested === void 0 ? void 0 : _testObj$totaltested.length) > 1 && /*#__PURE__*/React.createElement(\"a\", {\n    href: testObj.source,\n    target: \"_noblank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Icon.Link, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 15\n    }\n  })), currentHoveredRegion.name === 'Total' ? testedToolTip : '')), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"meta fadeInUp\",\n    style: {\n      animationDelay: '2.4s'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: `${mapOption !== 'confirmed' ? mapOption : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 9\n    }\n  }, currentHoveredRegion.name), currentHoveredRegion.lastupdatedtime && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"last-update\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }\n  }, \"Last updated\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 13\n    }\n  }, isNaN(Date.parse(formatDate(currentHoveredRegion.lastupdatedtime))) ? '' : formatDistance(new Date(formatDate(currentHoveredRegion.lastupdatedtime)), new Date()) + ' ago')), currentMap.mapType === MAP_TYPES.STATE && currentHoveredRegion.name !== currentMap.name ? /*#__PURE__*/React.createElement(\"h1\", {\n    className: `district ${mapOption !== 'confirmed' ? mapOption : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 11\n    }\n  }, currentMapData[currentHoveredRegion.name] ? currentMapData[currentHoveredRegion.name][mapOption] : 0, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      fontSize: '0.75rem',\n      fontWeight: 600\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }\n  }, mapOption)) : null, currentMap.mapType === MAP_TYPES.STATE && currentMapData.Unknown && currentMapData.Unknown[mapOption] > 0 ? /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"unknown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 11\n    }\n  }, \"Districts unknown for \", currentMapData.Unknown[mapOption], \" people\") : null, currentMap.mapType === MAP_TYPES.STATE ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button back-button\",\n    onClick: () => switchMapToState('India'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 11\n    }\n  }, \"Back\") : null, currentMap.mapType === MAP_TYPES.STATE ? /*#__PURE__*/React.createElement(Link, {\n    to: `state/${currentHoveredRegion.statecode}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button state-page-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"abbr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 15\n    }\n  }, \"Visit state page\"), /*#__PURE__*/React.createElement(Icon.ArrowRightCircle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 15\n    }\n  }))) : null), mapOption && /*#__PURE__*/React.createElement(ChoroplethMap, {\n    statistic: statistic,\n    mapMeta: currentMap,\n    mapData: currentMapData,\n    setHoveredRegion: setHoveredRegion,\n    changeMap: switchMapToState,\n    selectedRegion: selectedRegion,\n    setSelectedRegion: setSelectedRegion,\n    isCountryLoaded: isCountryLoaded,\n    mapOption: mapOption,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default React.memo(MapExplorer);","map":{"version":3,"sources":["/Users/sonalgupta/Documents/research/Weather data/website/covid19india-react/src/components/mapexplorer.js"],"names":["ChoroplethMap","testedToolTip","MAP_TYPES","MAP_META","formatDate","formatNumber","formatDistance","format","parse","React","useState","useEffect","useMemo","useCallback","Icon","Link","useLocalStorage","getRegionFromState","state","region","name","getRegionFromDistrict","districtData","MapExplorer","mapMeta","states","stateDistrictWiseData","stateTestData","regionHighlighted","onMapHighlightChange","isCountryLoaded","anchor","setAnchor","mapOptionProp","selectedRegion","setSelectedRegion","panelRegion","setPanelRegion","currentHoveredRegion","setCurrentHoveredRegion","testObj","setTestObj","currentMap","setCurrentMap","mapOption","setMapOption","statistic","currentMapData","dataTypes","reduce","acc","dtype","total","max","mapType","COUNTRY","forEach","typeCount","parseInt","STATE","districtWiseData","Object","keys","district","setHoveredRegion","find","confirmed","active","recovered","deaths","statecode","districtName","undefined","isState","newMap","switchMapToState","topDistrict","filter","sort","a","b","obj","totaltested","animationDelay","display","window","innerWidth","deltaconfirmed","deltarecovered","deltadeaths","isNaN","updatedon","Date","length","source","lastupdatedtime","fontSize","fontWeight","Unknown","memo"],"mappings":"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","sourcesContent":["import ChoroplethMap from './choropleth';\nimport {testedToolTip} from './tooltips';\n\nimport {MAP_TYPES, MAP_META} from '../constants';\nimport {formatDate, formatNumber} from '../utils/commonfunctions';\n\nimport {formatDistance, format, parse} from 'date-fns';\nimport React, {useState, useEffect, useMemo, useCallback} from 'react';\nimport * as Icon from 'react-feather';\nimport {Link} from 'react-router-dom';\nimport {useLocalStorage} from 'react-use';\n\nconst getRegionFromState = (state) => {\n  if (!state) return;\n  const region = {...state};\n  if (!region.name) region.name = region.state;\n  return region;\n};\n\nconst getRegionFromDistrict = (districtData, name) => {\n  if (!districtData) return;\n  const region = {...districtData};\n  if (!region.name) region.name = name;\n  return region;\n};\n\nfunction MapExplorer({\n  mapMeta,\n  states,\n  stateDistrictWiseData,\n  stateTestData,\n  regionHighlighted,\n  onMapHighlightChange,\n  isCountryLoaded,\n  anchor,\n  setAnchor,\n  mapOptionProp,\n}) {\n  const [selectedRegion, setSelectedRegion] = useState({});\n  const [panelRegion, setPanelRegion] = useState(getRegionFromState(states[0]));\n  const [currentHoveredRegion, setCurrentHoveredRegion] = useState(\n    getRegionFromState(states[0])\n  );\n  const [testObj, setTestObj] = useState({});\n  const [currentMap, setCurrentMap] = useState(mapMeta);\n  const [mapOption, setMapOption] = useLocalStorage('mapOption', 'active');\n\n  const [statistic, currentMapData] = useMemo(() => {\n    const dataTypes = ['confirmed', 'active', 'recovered', 'deceased'];\n    const statistic = dataTypes.reduce((acc, dtype) => {\n      acc[dtype] = {total: 0, max: 0};\n      return acc;\n    }, {});\n    let currentMapData = {};\n\n    if (currentMap.mapType === MAP_TYPES.COUNTRY) {\n      currentMapData = states.reduce((acc, state) => {\n        if (state.state === 'Total') {\n          return acc;\n        }\n        acc[state.state] = {};\n        dataTypes.forEach((dtype) => {\n          const typeCount = parseInt(\n            state[dtype !== 'deceased' ? dtype : 'deaths']\n          );\n          statistic[dtype].total += typeCount;\n          if (typeCount > statistic[dtype].max) {\n            statistic[dtype].max = typeCount;\n          }\n          acc[state.state][dtype] = typeCount;\n        });\n        return acc;\n      }, {});\n    } else if (currentMap.mapType === MAP_TYPES.STATE) {\n      const districtWiseData = (\n        stateDistrictWiseData[currentMap.name] || {districtData: {}}\n      ).districtData;\n      currentMapData = Object.keys(districtWiseData).reduce((acc, district) => {\n        acc[district] = {};\n        dataTypes.forEach((dtype) => {\n          const typeCount = parseInt(districtWiseData[district][dtype]);\n          statistic[dtype].total += typeCount;\n          if (typeCount > statistic[dtype].max) {\n            statistic[dtype].max = typeCount;\n          }\n          acc[district][dtype] = typeCount;\n        });\n        return acc;\n      }, {});\n    }\n    return [statistic, currentMapData];\n  }, [currentMap, states, stateDistrictWiseData]);\n\n  const setHoveredRegion = useCallback(\n    (name, currentMap) => {\n      if (currentMap.mapType === MAP_TYPES.COUNTRY) {\n        const region = getRegionFromState(\n          states.find((state) => name === state.state)\n        );\n        setCurrentHoveredRegion(region);\n        setPanelRegion(region);\n        onMapHighlightChange(region);\n      } else if (currentMap.mapType === MAP_TYPES.STATE) {\n        const state = stateDistrictWiseData[currentMap.name] || {\n          districtData: {},\n        };\n        let districtData = state.districtData[name];\n        if (!districtData) {\n          districtData = {\n            confirmed: 0,\n            active: 0,\n            recovered: 0,\n            deaths: 0,\n          };\n        }\n        const currentHoveredRegion = getRegionFromDistrict(districtData, name);\n        const panelRegion = getRegionFromState(\n          states.find((state) => currentMap.name === state.state)\n        );\n        setPanelRegion(panelRegion);\n        currentHoveredRegion.statecode = panelRegion.statecode;\n        setCurrentHoveredRegion(currentHoveredRegion);\n        panelRegion.districtName = currentHoveredRegion.name;\n        if (onMapHighlightChange) onMapHighlightChange(panelRegion);\n      }\n    },\n    [states, stateDistrictWiseData, onMapHighlightChange]\n  );\n\n  useEffect(() => {\n    if (mapOptionProp) setMapOption(mapOptionProp);\n  }, [mapOptionProp, setMapOption]);\n\n  useEffect(() => {\n    if (regionHighlighted === undefined || regionHighlighted === null) return;\n\n    const isState = !('district' in regionHighlighted);\n    if (isState) {\n      const newMap = MAP_META['India'];\n      setCurrentMap(newMap);\n      const region = getRegionFromState(regionHighlighted.state);\n      setHoveredRegion(region.name, newMap);\n      setSelectedRegion(region.name);\n    } else {\n      const newMap = MAP_META[regionHighlighted.state.state];\n      if (!newMap) {\n        return;\n      }\n      setCurrentMap(newMap);\n      setHoveredRegion(regionHighlighted.district, newMap);\n      setSelectedRegion(regionHighlighted.district);\n    }\n  }, [regionHighlighted, setHoveredRegion]);\n\n  const switchMapToState = useCallback(\n    (name) => {\n      const newMap = MAP_META[name];\n      if (!newMap) {\n        return;\n      }\n      setCurrentMap(newMap);\n      setSelectedRegion(null);\n      if (newMap.mapType === MAP_TYPES.COUNTRY) {\n        setHoveredRegion(states[0].state, newMap);\n      } else if (newMap.mapType === MAP_TYPES.STATE) {\n        const {districtData} = stateDistrictWiseData[name] || {\n          districtData: {},\n        };\n        const topDistrict = Object.keys(districtData)\n          .filter((name) => name !== 'Unknown')\n          .sort((a, b) => {\n            return districtData[b].confirmed - districtData[a].confirmed;\n          })[0];\n        setHoveredRegion(topDistrict, newMap);\n        setSelectedRegion(topDistrict);\n      }\n    },\n    [setHoveredRegion, stateDistrictWiseData, states]\n  );\n\n  useEffect(() => {\n    setTestObj(\n      stateTestData.find(\n        (obj) => obj.state === panelRegion.name && obj.totaltested !== ''\n      )\n    );\n  }, [panelRegion, stateTestData, testObj]);\n\n  return (\n    <div\n      className={`MapExplorer fadeInUp ${\n        anchor === 'mapexplorer' ? 'stickied' : ''\n      }`}\n      style={{\n        animationDelay: '1.5s',\n        display: anchor === 'timeseries' ? 'none' : '',\n      }}\n    >\n      {window.innerWidth > 769 && (\n        <div\n          className={`anchor ${anchor === 'mapexplorer' ? 'stickied' : ''}`}\n          onClick={() => {\n            setAnchor(anchor === 'mapexplorer' ? null : 'mapexplorer');\n          }}\n        >\n          <Icon.Anchor />\n        </div>\n      )}\n      <div className=\"header\">\n        <h1>{currentMap.name} Map</h1>\n        <h6>\n          {window.innerWidth <= 769 ? 'Tap' : 'Hover'} over a{' '}\n          {currentMap.mapType === MAP_TYPES.COUNTRY ? 'state/UT' : 'district'}{' '}\n          for more details\n        </h6>\n      </div>\n\n      <div className=\"map-stats\">\n        <div\n          className={`stats fadeInUp ${\n            mapOption === 'confirmed' ? 'focused' : ''\n          }`}\n          style={{animationDelay: '2s'}}\n          onClick={() => setMapOption('confirmed')}\n        >\n          <h5>{window.innerWidth <= 769 ? 'Cnfmd' : 'Confirmed'}</h5>\n          <div className=\"stats-bottom\">\n            <h1>{formatNumber(panelRegion.confirmed)}</h1>\n            <h6>{`+${formatNumber(panelRegion.deltaconfirmed)}`}</h6>\n          </div>\n        </div>\n\n        <div\n          className={`stats is-blue fadeInUp ${\n            mapOption === 'active' ? 'focused' : ''\n          }`}\n          style={{animationDelay: '2.1s'}}\n          onClick={() => setMapOption('active')}\n        >\n          <h5>{window.innerWidth <= 769 ? 'Actv' : 'Active'}</h5>\n          <div className=\"stats-bottom\">\n            <h1>{formatNumber(panelRegion.active)}</h1>\n            <h6>{` `}</h6>\n          </div>\n        </div>\n\n        <div\n          className={`stats is-green fadeInUp ${\n            mapOption === 'recovered' ? 'focused' : ''\n          }`}\n          style={{animationDelay: '2.2s'}}\n          onClick={() => setMapOption('recovered')}\n        >\n          <h5>{window.innerWidth <= 769 ? 'Rcvrd' : 'Recovered'}</h5>\n          <div className=\"stats-bottom\">\n            <h1>{formatNumber(panelRegion.recovered)}</h1>\n            <h6>{`+${formatNumber(panelRegion.deltarecovered)}`}</h6>\n          </div>\n        </div>\n\n        <div\n          className={`stats is-gray fadeInUp ${\n            mapOption === 'deceased' ? 'focused' : ''\n          }`}\n          style={{animationDelay: '2.3s'}}\n          onClick={() => setMapOption('deceased')}\n        >\n          <h5>{window.innerWidth <= 769 ? 'Dcsd' : 'Deceased'}</h5>\n          <div className=\"stats-bottom\">\n            <h1>{formatNumber(panelRegion.deaths)}</h1>\n            <h6>{`+${formatNumber(panelRegion.deltadeaths)}`}</h6>\n          </div>\n        </div>\n\n        <div\n          className=\"stats is-purple tested fadeInUp\"\n          style={{animationDelay: '2.4s'}}\n        >\n          <h5>Tested</h5>\n          <div className=\"stats-bottom\">\n            <h1>{formatNumber(testObj?.totaltested)}</h1>\n          </div>\n          <h6 className=\"timestamp\">\n            {!isNaN(parse(testObj?.updatedon, 'dd/MM/yyyy', new Date()))\n              ? `As of ${format(\n                  parse(testObj?.updatedon, 'dd/MM/yyyy', new Date()),\n                  'dd MMM'\n                )}`\n              : ''}\n          </h6>\n          {testObj?.totaltested?.length > 1 && (\n            <a href={testObj.source} target=\"_noblank\">\n              <Icon.Link />\n            </a>\n          )}\n          {currentHoveredRegion.name === 'Total' ? testedToolTip : ''}\n        </div>\n      </div>\n\n      <div className=\"meta fadeInUp\" style={{animationDelay: '2.4s'}}>\n        <h2 className={`${mapOption !== 'confirmed' ? mapOption : ''}`}>\n          {currentHoveredRegion.name}\n        </h2>\n        {currentHoveredRegion.lastupdatedtime && (\n          <div className=\"last-update\">\n            <h6>Last updated</h6>\n            <h3>\n              {isNaN(\n                Date.parse(formatDate(currentHoveredRegion.lastupdatedtime))\n              )\n                ? ''\n                : formatDistance(\n                    new Date(formatDate(currentHoveredRegion.lastupdatedtime)),\n                    new Date()\n                  ) + ' ago'}\n            </h3>\n          </div>\n        )}\n\n        {currentMap.mapType === MAP_TYPES.STATE &&\n        currentHoveredRegion.name !== currentMap.name ? (\n          <h1\n            className={`district ${mapOption !== 'confirmed' ? mapOption : ''}`}\n          >\n            {currentMapData[currentHoveredRegion.name]\n              ? currentMapData[currentHoveredRegion.name][mapOption]\n              : 0}\n            <br />\n            <span style={{fontSize: '0.75rem', fontWeight: 600}}>\n              {mapOption}\n            </span>\n          </h1>\n        ) : null}\n\n        {currentMap.mapType === MAP_TYPES.STATE &&\n        currentMapData.Unknown &&\n        currentMapData.Unknown[mapOption] > 0 ? (\n          <h4 className=\"unknown\">\n            Districts unknown for {currentMapData.Unknown[mapOption]} people\n          </h4>\n        ) : null}\n\n        {currentMap.mapType === MAP_TYPES.STATE ? (\n          <div\n            className=\"button back-button\"\n            onClick={() => switchMapToState('India')}\n          >\n            Back\n          </div>\n        ) : null}\n\n        {currentMap.mapType === MAP_TYPES.STATE ? (\n          <Link to={`state/${currentHoveredRegion.statecode}`}>\n            <div className=\"button state-page-button\">\n              <abbr>Visit state page</abbr>\n              <Icon.ArrowRightCircle />\n            </div>\n          </Link>\n        ) : null}\n      </div>\n\n      {mapOption && (\n        <ChoroplethMap\n          statistic={statistic}\n          mapMeta={currentMap}\n          mapData={currentMapData}\n          setHoveredRegion={setHoveredRegion}\n          changeMap={switchMapToState}\n          selectedRegion={selectedRegion}\n          setSelectedRegion={setSelectedRegion}\n          isCountryLoaded={isCountryLoaded}\n          mapOption={mapOption}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default React.memo(MapExplorer);\n"]},"metadata":{},"sourceType":"module"}