{"ast":null,"code":"var _jsxFileName = \"/Users/sonalgupta/Documents/research/Weather data/website/covid19india-react/src/components/resourcetable.js\";\nimport TableAccordion from './Essentials/essentialsaccordionmobile';\nimport { // renderCell,\ngetHighlightedText, getFormattedLink, getSuggestions } from './Essentials/essentialsutls';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport React, { useState, useEffect, useRef } from 'react'; // import Autosuggest from 'react-autosuggest';\n\nimport * as Icon from 'react-feather';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { useTable } from 'react-table';\nimport { useDebounce } from 'react-use';\n\nfunction ResourceTable({\n  columns,\n  data,\n  isDesktop,\n  totalCount,\n  onScrollUpdate,\n  city,\n  category,\n  indianstate\n}) {\n  const [searchValue, setSearchValue] = useState('');\n  const [suggestions, setSuggestions] = useState(data);\n  const prevIndianState = useRef('');\n  const prevCity = useRef('');\n  const prevCategory = useRef('');\n\n  const renderCell = celli => {\n    const value = celli.cell.value;\n    let renderedvalue = '';\n    const link = celli.row.allCells[5].value.split(',')[0];\n    if (celli.column.id === 'contact') renderedvalue = getFormattedLink(getHighlightedText(value, searchValue, 'desktop'));else if (celli.column.id === 'phonenumber') {\n      // renderedvalue = String(JSON.parse(JSON.stringify(getNumbersLink(value))).numberList).replace(/,/g, '<br>');\n      renderedvalue = getFormattedLink(getHighlightedText(value, searchValue, 'desktop'));\n    } else if (celli.column.id === 'nameoftheorganisation') {\n      if (link !== '') renderedvalue = `<a href=${link} target=\"_blank\">${getHighlightedText(value, searchValue, 'desktop')}</a>`;else renderedvalue = getHighlightedText(value, searchValue, 'desktop');\n    } else renderedvalue = getHighlightedText(value, searchValue, 'desktop');\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tablecelldata\",\n      dangerouslySetInnerHTML: {\n        __html: renderedvalue\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (prevCategory.current === category && prevIndianState.current === indianstate && prevCity.current === city) {\n      setSuggestions(getSuggestions(searchValue, data));\n    } else {\n      setSuggestions(data);\n      setSearchValue('');\n      prevCategory.current = category;\n      prevIndianState.current = indianstate;\n      prevCity.current = city;\n    }\n  }, [searchValue, data, category, indianstate, city]); // Debounce to throttle user search input\n\n  useDebounce(() => {\n    if (searchValue) {\n      setSearchValue(searchValue);\n    }\n\n    if (suggestions.length < 7 && totalCount > suggestions.length && suggestions.length) {\n      onScrollUpdate();\n    }\n  }, 800, [searchValue, suggestions, totalCount, onScrollUpdate]); // Use the state and functions returned from useTable to build your UI\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    rows\n  } = useTable({\n    columns,\n    data: suggestions,\n    initialState: {\n      hiddenColumns: 'contact'\n    }\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"input-field-searchbar\",\n    label: \"Search keyword\",\n    fullWidth: true,\n    InputLabelProps: {\n      shrink: true\n    },\n    style: {\n      width: '100%'\n    },\n    variant: \"outlined\",\n    InputProps: {\n      startAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        position: \"start\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Icon.Search, {\n        size: \"0.9em\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }\n      }))\n    },\n    onChange: event => {\n      setSearchValue(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: suggestions.length,\n    hasMore: suggestions.length < totalCount && suggestions.length,\n    next: onScrollUpdate,\n    loader: /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"https://upload.wikimedia.org/wikipedia/commons/d/dd/Loading-gif-builder-comwrap.gif\",\n      alt: \"Loading data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    })),\n    style: isDesktop ? {\n      width: '100%',\n      overflow: 'none'\n    } : {\n      width: '100%',\n      overflow: 'none',\n      maxWidth: '300px'\n    },\n    endMessage: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }\n    }, !suggestions.length && /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 15\n      }\n    }, \"No Results Found\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tableandaccordions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, isDesktop && /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 15\n    }\n  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement(\"tr\", Object.assign({\n    key: headerGroup.id\n  }, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 19\n    }\n  }), headerGroup.headers.map((column, i) => /*#__PURE__*/React.createElement(\"th\", Object.assign({\n    key: column.id\n  }, column.getHeaderProps(), {\n    className: i === 3 ? 'descriptionCol sticky' : 'sticky',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 23\n    }\n  }), column.render('Header')))))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 15\n    }\n  }), rows.map((row, i) => {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({\n      key: row.id\n    }, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }\n    }), row.cells.map((cell, cellindex) => {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({\n        key: cellindex\n      }, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 27\n        }\n      }), cell.render(renderCell));\n    }));\n  }))), !isDesktop && /*#__PURE__*/React.createElement(TableAccordion, {\n    rows: rows,\n    searchValue: searchValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default ResourceTable;","map":{"version":3,"sources":["/Users/sonalgupta/Documents/research/Weather data/website/covid19india-react/src/components/resourcetable.js"],"names":["TableAccordion","getHighlightedText","getFormattedLink","getSuggestions","InputAdornment","TextField","React","useState","useEffect","useRef","Icon","InfiniteScroll","useTable","useDebounce","ResourceTable","columns","data","isDesktop","totalCount","onScrollUpdate","city","category","indianstate","searchValue","setSearchValue","suggestions","setSuggestions","prevIndianState","prevCity","prevCategory","renderCell","celli","value","cell","renderedvalue","link","row","allCells","split","column","id","__html","current","length","getTableProps","getTableBodyProps","headerGroups","prepareRow","rows","initialState","hiddenColumns","shrink","width","startAdornment","event","target","textAlign","overflow","maxWidth","map","headerGroup","getHeaderGroupProps","headers","i","getHeaderProps","render","getRowProps","cells","cellindex","getCellProps"],"mappings":"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","sourcesContent":["import TableAccordion from './Essentials/essentialsaccordionmobile';\nimport {\n  // renderCell,\n  getHighlightedText,\n  getFormattedLink,\n  getSuggestions,\n} from './Essentials/essentialsutls';\n\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport React, {useState, useEffect, useRef} from 'react';\n// import Autosuggest from 'react-autosuggest';\nimport * as Icon from 'react-feather';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport {useTable} from 'react-table';\nimport {useDebounce} from 'react-use';\n\nfunction ResourceTable({\n  columns,\n  data,\n  isDesktop,\n  totalCount,\n  onScrollUpdate,\n  city,\n  category,\n  indianstate,\n}) {\n  const [searchValue, setSearchValue] = useState('');\n  const [suggestions, setSuggestions] = useState(data);\n  const prevIndianState = useRef('');\n  const prevCity = useRef('');\n  const prevCategory = useRef('');\n\n  const renderCell = (celli) => {\n    const value = celli.cell.value;\n    let renderedvalue = '';\n    const link = celli.row.allCells[5].value.split(',')[0];\n\n    if (celli.column.id === 'contact')\n      renderedvalue = getFormattedLink(\n        getHighlightedText(value, searchValue, 'desktop')\n      );\n    else if (celli.column.id === 'phonenumber') {\n      // renderedvalue = String(JSON.parse(JSON.stringify(getNumbersLink(value))).numberList).replace(/,/g, '<br>');\n      renderedvalue = getFormattedLink(\n        getHighlightedText(value, searchValue, 'desktop')\n      );\n    } else if (celli.column.id === 'nameoftheorganisation') {\n      if (link !== '')\n        renderedvalue = `<a href=${link} target=\"_blank\">${getHighlightedText(\n          value,\n          searchValue,\n          'desktop'\n        )}</a>`;\n      else renderedvalue = getHighlightedText(value, searchValue, 'desktop');\n    } else renderedvalue = getHighlightedText(value, searchValue, 'desktop');\n\n    return (\n      <div\n        className=\"tablecelldata\"\n        dangerouslySetInnerHTML={{\n          __html: renderedvalue,\n        }}\n      ></div>\n    );\n  };\n\n  useEffect(() => {\n    if (\n      prevCategory.current === category &&\n      prevIndianState.current === indianstate &&\n      prevCity.current === city\n    ) {\n      setSuggestions(getSuggestions(searchValue, data));\n    } else {\n      setSuggestions(data);\n      setSearchValue('');\n      prevCategory.current = category;\n      prevIndianState.current = indianstate;\n      prevCity.current = city;\n    }\n  }, [searchValue, data, category, indianstate, city]);\n\n  // Debounce to throttle user search input\n  useDebounce(\n    () => {\n      if (searchValue) {\n        setSearchValue(searchValue);\n      }\n      if (\n        suggestions.length < 7 &&\n        totalCount > suggestions.length &&\n        suggestions.length\n      ) {\n        onScrollUpdate();\n      }\n    },\n    800,\n    [searchValue, suggestions, totalCount, onScrollUpdate]\n  );\n\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    rows,\n  } = useTable({\n    columns,\n    data: suggestions,\n    initialState: {hiddenColumns: 'contact'},\n  });\n  return (\n    <React.Fragment>\n      <div className=\"searchbar\">\n        <TextField\n          id=\"input-field-searchbar\"\n          label=\"Search keyword\"\n          fullWidth={true}\n          InputLabelProps={{\n            shrink: true,\n          }}\n          style={{\n            width: '100%',\n          }}\n          variant=\"outlined\"\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <Icon.Search size=\"0.9em\" />\n              </InputAdornment>\n            ),\n          }}\n          onChange={(event) => {\n            setSearchValue(event.target.value);\n          }}\n        />\n      </div>\n      <InfiniteScroll\n        dataLength={suggestions.length}\n        hasMore={suggestions.length < totalCount && suggestions.length}\n        next={onScrollUpdate}\n        loader={\n          <h3 style={{textAlign: 'center'}}>\n            <img\n              src=\"https://upload.wikimedia.org/wikipedia/commons/d/dd/Loading-gif-builder-comwrap.gif\"\n              alt=\"Loading data\"\n            />\n          </h3>\n        }\n        style={\n          isDesktop\n            ? {width: '100%', overflow: 'none'}\n            : {width: '100%', overflow: 'none', maxWidth: '300px'}\n        }\n        endMessage={\n          <div>\n            {!suggestions.length && (\n              <h3 style={{textAlign: 'center'}}>No Results Found</h3>\n            )}\n          </div>\n        }\n      >\n        <div className=\"tableandaccordions\">\n          {isDesktop && (\n            <table {...getTableProps()}>\n              <thead>\n                {headerGroups.map((headerGroup) => (\n                  <tr\n                    key={headerGroup.id}\n                    {...headerGroup.getHeaderGroupProps()}\n                  >\n                    {headerGroup.headers.map((column, i) => (\n                      <th\n                        key={column.id}\n                        {...column.getHeaderProps()}\n                        className={i === 3 ? 'descriptionCol sticky' : 'sticky'}\n                      >\n                        {column.render('Header')}\n                      </th>\n                    ))}\n                  </tr>\n                ))}\n              </thead>\n              <tbody {...getTableBodyProps()}>\n                {rows.map((row, i) => {\n                  prepareRow(row);\n                  return (\n                    <tr key={row.id} {...row.getRowProps()}>\n                      {row.cells.map((cell, cellindex) => {\n                        return (\n                          <td key={cellindex} {...cell.getCellProps()}>\n                            {cell.render(renderCell)}\n                          </td>\n                        );\n                      })}\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          )}\n          {!isDesktop && (\n            <TableAccordion rows={rows} searchValue={searchValue} />\n          )}\n        </div>\n      </InfiniteScroll>\n    </React.Fragment>\n  );\n}\n\nexport default ResourceTable;\n"]},"metadata":{},"sourceType":"module"}