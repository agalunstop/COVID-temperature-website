{"ast":null,"code":"var _jsxFileName = \"/Users/sonalgupta/Documents/research/Weather data/website/covid19india-react/src/components/choropleth.js\";\nimport legend from './legend';\nimport { MAP_TYPES } from '../constants';\nimport { formatNumber } from '../utils/commonfunctions';\nimport * as d3 from 'd3';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport * as Icon from 'react-feather';\nimport * as topojson from 'topojson';\nconst propertyFieldMap = {\n  country: 'st_nm',\n  state: 'district'\n};\n\nfunction ChoroplethMap({\n  statistic,\n  mapData,\n  setHoveredRegion,\n  mapMeta,\n  changeMap,\n  selectedRegion,\n  setSelectedRegion,\n  isCountryLoaded,\n  mapOption\n}) {\n  var _mapData$Unknown, _mapData$Unknown2;\n\n  const choroplethMap = useRef(null);\n  const choroplethLegend = useRef(null);\n  const [svgRenderCount, setSvgRenderCount] = useState(0);\n  const ready = useCallback(geoData => {\n    d3.selectAll('svg#chart > *').remove();\n    const propertyField = propertyFieldMap[mapMeta.mapType];\n    const svg = d3.select(choroplethMap.current);\n    const topology = topojson.feature(geoData, geoData.objects[mapMeta.graphObjectName]);\n    const projection = d3.geoMercator(); // Set size of the map\n\n    let path;\n    let width;\n    let height;\n\n    if (!svg.attr('viewBox')) {\n      const widthStyle = parseInt(svg.style('width'));\n      if (isCountryLoaded) projection.fitWidth(widthStyle, topology);else {\n        const heightStyle = parseInt(svg.style('height'));\n        projection.fitSize([widthStyle, heightStyle], topology);\n      }\n      path = d3.geoPath(projection);\n      const bBox = path.bounds(topology);\n      width = +bBox[1][0];\n      height = +bBox[1][1];\n      svg.attr('viewBox', `0 0 ${width} ${height}`);\n    }\n\n    const bBox = svg.attr('viewBox').split(' ');\n    width = +bBox[2];\n    height = +bBox[3];\n    projection.fitSize([width, height], topology);\n    path = d3.geoPath(projection);\n    /* Legend */\n\n    const svgLegend = d3.select(choroplethLegend.current);\n    svgLegend.selectAll('*').remove();\n\n    const colorInterpolator = t => {\n      switch (mapOption) {\n        case 'confirmed':\n          return d3.interpolateReds(t * 0.85);\n\n        case 'active':\n          return d3.interpolateBlues(t * 0.85);\n\n        case 'recovered':\n          return d3.interpolateGreens(t * 0.85);\n\n        case 'deceased':\n          return d3.interpolateGreys(t * 0.85);\n\n        default:\n          return;\n      }\n    };\n\n    const colorScale = d3.scaleSequential([0, Math.max(1, statistic[mapOption].max)], colorInterpolator); // Colorbar\n\n    const widthLegend = parseInt(svgLegend.style('width'));\n    const heightLegend = +svgLegend.attr('height');\n    svgLegend.append('g').append(() => legend({\n      color: colorScale,\n      title: mapOption.charAt(0).toUpperCase() + mapOption.slice(1) + ' Cases',\n      width: widthLegend,\n      height: 0.8 * heightLegend,\n      ticks: 6,\n      tickFormat: function (d, i, n) {\n        if (!Number.isInteger(d)) return;\n        if (i === n.length - 1) return formatNumber(d) + '+';\n        return formatNumber(d);\n      },\n      marginLeft: 2,\n      marginRight: 20\n    }));\n    svgLegend.attr('viewBox', `0 0 ${widthLegend} ${heightLegend}`);\n    /* Draw map */\n\n    let onceTouchedRegion = null;\n    const g = svg.append('g').attr('class', mapMeta.graphObjectName);\n    g.append('g').attr('class', 'states').selectAll('path').data(topology.features).join('path').attr('class', `path-region ${mapOption}`).attr('fill', function (d) {\n      const region = d.properties[propertyField];\n      const n = mapData[region] ? mapData[region][mapOption] : 0;\n      const color = n === 0 ? '#ffffff' : colorScale(n);\n      return color;\n    }).attr('d', path).attr('pointer-events', 'all').on('mouseenter', d => {\n      handleMouseEnter(d.properties[propertyField]);\n    }).on('mouseleave', d => {\n      if (onceTouchedRegion === d) onceTouchedRegion = null;\n    }).on('touchstart', d => {\n      if (onceTouchedRegion === d) onceTouchedRegion = null;else onceTouchedRegion = d;\n    }).on('click', handleClick).style('cursor', 'pointer').append('title').text(function (d) {\n      const region = d.properties[propertyField];\n      const value = mapData[region] ? mapData[region][mapOption] : 0;\n      return Number(parseFloat(100 * (value / (statistic[mapOption].total || 0.001))).toFixed(2)).toString() + '% from ' + toTitleCase(region);\n    });\n    g.append('path').attr('class', 'borders').attr('stroke', `${mapOption === 'confirmed' ? '#ff073a30' : mapOption === 'active' ? '#007bff30' : mapOption === 'recovered' ? '#28a74530' : mapOption === 'deceased' ? '#6c757d30' : ''}`).attr('fill', 'none').attr('stroke-width', width / 250).attr('d', path(topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectName])));\n\n    const handleMouseEnter = name => {\n      try {\n        setSelectedRegion(name);\n        setHoveredRegion(name, mapMeta);\n      } catch (err) {\n        console.log('err', err);\n      }\n    };\n\n    function handleClick(d) {\n      d3.event.stopPropagation();\n      if (onceTouchedRegion || mapMeta.mapType === MAP_TYPES.STATE) return; // Disable pointer events till the new map is rendered\n\n      svg.attr('pointer-events', 'none');\n      g.selectAll('.path-region').attr('pointer-events', 'none'); // Switch map\n\n      changeMap(d.properties[propertyField]);\n    } // Reset on tapping outside map\n\n\n    svg.attr('pointer-events', 'auto').on('click', () => {\n      if (mapMeta.mapType === MAP_TYPES.COUNTRY) {\n        setSelectedRegion(null);\n        setHoveredRegion('Total', mapMeta);\n      }\n    });\n  }, [mapMeta, statistic, mapOption, isCountryLoaded, mapData, setSelectedRegion, setHoveredRegion, changeMap]);\n\n  const toTitleCase = str => {\n    str = str.toLowerCase().split(' ');\n\n    for (let i = 0; i < str.length; i++) {\n      str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\n    }\n\n    return str.join(' ');\n  };\n\n  useEffect(() => {\n    (async () => {\n      const data = await d3.json(mapMeta.geoDataFile);\n\n      if (statistic && choroplethMap.current) {\n        ready(data);\n        setSvgRenderCount(prevCount => prevCount + 1);\n      }\n    })();\n  }, [mapMeta.geoDataFile, statistic, ready]);\n  useEffect(() => {\n    const highlightRegionInMap = name => {\n      const paths = d3.selectAll('.path-region');\n      paths.classed('map-hover', (d, i, nodes) => {\n        const propertyField = 'district' in d.properties ? propertyFieldMap['state'] : propertyFieldMap['country'];\n\n        if (name === d.properties[propertyField]) {\n          nodes[i].parentNode.appendChild(nodes[i]);\n          return true;\n        }\n\n        return false;\n      });\n    };\n\n    highlightRegionInMap(selectedRegion);\n  }, [svgRenderCount, selectedRegion]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"svg-parent fadeInUp\",\n    style: {\n      animationDelay: '2.5s'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    id: \"chart\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: choroplethMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }\n  }), mapOption === 'recovered' && (mapData === null || mapData === void 0 ? void 0 : (_mapData$Unknown = mapData.Unknown) === null || _mapData$Unknown === void 0 ? void 0 : _mapData$Unknown.recovered) || mapOption === 'deceased' && (mapData === null || mapData === void 0 ? void 0 : (_mapData$Unknown2 = mapData.Unknown) === null || _mapData$Unknown2 === void 0 ? void 0 : _mapData$Unknown2.deceased) ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"disclaimer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Icon.AlertCircle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }\n  }), `District-wise ${mapOption} numbers are under reconciliation`) : ''), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"svg-parent legend fadeInUp\",\n    style: {\n      animationDelay: '2.5s'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    id: \"legend\",\n    height: \"65\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: choroplethLegend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"svg\", {\n    style: {\n      position: 'absolute',\n      height: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"defs\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"balance-color\",\n    colorInterpolationFilters: \"sRGB\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    type: \"matrix\",\n    values: \"0.91372549 0 0 0 0.08627451 0 0.91372549 0 0 0.08627451 0 0 0.854901961 0 0.145098039 0 0 0 1 0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default React.memo(ChoroplethMap);","map":{"version":3,"sources":["/Users/sonalgupta/Documents/research/Weather data/website/covid19india-react/src/components/choropleth.js"],"names":["legend","MAP_TYPES","formatNumber","d3","React","useCallback","useEffect","useRef","useState","Icon","topojson","propertyFieldMap","country","state","ChoroplethMap","statistic","mapData","setHoveredRegion","mapMeta","changeMap","selectedRegion","setSelectedRegion","isCountryLoaded","mapOption","choroplethMap","choroplethLegend","svgRenderCount","setSvgRenderCount","ready","geoData","selectAll","remove","propertyField","mapType","svg","select","current","topology","feature","objects","graphObjectName","projection","geoMercator","path","width","height","attr","widthStyle","parseInt","style","fitWidth","heightStyle","fitSize","geoPath","bBox","bounds","split","svgLegend","colorInterpolator","t","interpolateReds","interpolateBlues","interpolateGreens","interpolateGreys","colorScale","scaleSequential","Math","max","widthLegend","heightLegend","append","color","title","charAt","toUpperCase","slice","ticks","tickFormat","d","i","n","Number","isInteger","length","marginLeft","marginRight","onceTouchedRegion","g","data","features","join","region","properties","on","handleMouseEnter","handleClick","text","value","parseFloat","total","toFixed","toString","toTitleCase","mesh","name","err","console","log","event","stopPropagation","STATE","COUNTRY","str","toLowerCase","json","geoDataFile","prevCount","highlightRegionInMap","paths","classed","nodes","parentNode","appendChild","animationDelay","Unknown","recovered","deceased","position","memo"],"mappings":"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","sourcesContent":["import legend from './legend';\n\nimport {MAP_TYPES} from '../constants';\nimport {formatNumber} from '../utils/commonfunctions';\n\nimport * as d3 from 'd3';\nimport React, {useCallback, useEffect, useRef, useState} from 'react';\nimport * as Icon from 'react-feather';\nimport * as topojson from 'topojson';\n\nconst propertyFieldMap = {\n  country: 'st_nm',\n  state: 'district',\n};\n\nfunction ChoroplethMap({\n  statistic,\n  mapData,\n  setHoveredRegion,\n  mapMeta,\n  changeMap,\n  selectedRegion,\n  setSelectedRegion,\n  isCountryLoaded,\n  mapOption,\n}) {\n  const choroplethMap = useRef(null);\n  const choroplethLegend = useRef(null);\n  const [svgRenderCount, setSvgRenderCount] = useState(0);\n\n  const ready = useCallback(\n    (geoData) => {\n      d3.selectAll('svg#chart > *').remove();\n\n      const propertyField = propertyFieldMap[mapMeta.mapType];\n      const svg = d3.select(choroplethMap.current);\n\n      const topology = topojson.feature(\n        geoData,\n        geoData.objects[mapMeta.graphObjectName]\n      );\n\n      const projection = d3.geoMercator();\n\n      // Set size of the map\n      let path;\n      let width;\n      let height;\n      if (!svg.attr('viewBox')) {\n        const widthStyle = parseInt(svg.style('width'));\n        if (isCountryLoaded) projection.fitWidth(widthStyle, topology);\n        else {\n          const heightStyle = parseInt(svg.style('height'));\n          projection.fitSize([widthStyle, heightStyle], topology);\n        }\n        path = d3.geoPath(projection);\n        const bBox = path.bounds(topology);\n        width = +bBox[1][0];\n        height = +bBox[1][1];\n        svg.attr('viewBox', `0 0 ${width} ${height}`);\n      }\n      const bBox = svg.attr('viewBox').split(' ');\n      width = +bBox[2];\n      height = +bBox[3];\n      projection.fitSize([width, height], topology);\n      path = d3.geoPath(projection);\n\n      /* Legend */\n      const svgLegend = d3.select(choroplethLegend.current);\n      svgLegend.selectAll('*').remove();\n      const colorInterpolator = (t) => {\n        switch (mapOption) {\n          case 'confirmed':\n            return d3.interpolateReds(t * 0.85);\n          case 'active':\n            return d3.interpolateBlues(t * 0.85);\n          case 'recovered':\n            return d3.interpolateGreens(t * 0.85);\n          case 'deceased':\n            return d3.interpolateGreys(t * 0.85);\n          default:\n            return;\n        }\n      };\n      const colorScale = d3.scaleSequential(\n        [0, Math.max(1, statistic[mapOption].max)],\n        colorInterpolator\n      );\n      // Colorbar\n      const widthLegend = parseInt(svgLegend.style('width'));\n      const heightLegend = +svgLegend.attr('height');\n      svgLegend.append('g').append(() =>\n        legend({\n          color: colorScale,\n          title:\n            mapOption.charAt(0).toUpperCase() + mapOption.slice(1) + ' Cases',\n          width: widthLegend,\n          height: 0.8 * heightLegend,\n          ticks: 6,\n          tickFormat: function (d, i, n) {\n            if (!Number.isInteger(d)) return;\n            if (i === n.length - 1) return formatNumber(d) + '+';\n            return formatNumber(d);\n          },\n          marginLeft: 2,\n          marginRight: 20,\n        })\n      );\n      svgLegend.attr('viewBox', `0 0 ${widthLegend} ${heightLegend}`);\n\n      /* Draw map */\n      let onceTouchedRegion = null;\n      const g = svg.append('g').attr('class', mapMeta.graphObjectName);\n      g.append('g')\n        .attr('class', 'states')\n        .selectAll('path')\n        .data(topology.features)\n        .join('path')\n        .attr('class', `path-region ${mapOption}`)\n        .attr('fill', function (d) {\n          const region = d.properties[propertyField];\n          const n = mapData[region] ? mapData[region][mapOption] : 0;\n          const color = n === 0 ? '#ffffff' : colorScale(n);\n          return color;\n        })\n        .attr('d', path)\n        .attr('pointer-events', 'all')\n        .on('mouseenter', (d) => {\n          handleMouseEnter(d.properties[propertyField]);\n        })\n        .on('mouseleave', (d) => {\n          if (onceTouchedRegion === d) onceTouchedRegion = null;\n        })\n        .on('touchstart', (d) => {\n          if (onceTouchedRegion === d) onceTouchedRegion = null;\n          else onceTouchedRegion = d;\n        })\n        .on('click', handleClick)\n        .style('cursor', 'pointer')\n        .append('title')\n        .text(function (d) {\n          const region = d.properties[propertyField];\n          const value = mapData[region] ? mapData[region][mapOption] : 0;\n          return (\n            Number(\n              parseFloat(\n                100 * (value / (statistic[mapOption].total || 0.001))\n              ).toFixed(2)\n            ).toString() +\n            '% from ' +\n            toTitleCase(region)\n          );\n        });\n\n      g.append('path')\n        .attr('class', 'borders')\n        .attr(\n          'stroke',\n          `${\n            mapOption === 'confirmed'\n              ? '#ff073a30'\n              : mapOption === 'active'\n              ? '#007bff30'\n              : mapOption === 'recovered'\n              ? '#28a74530'\n              : mapOption === 'deceased'\n              ? '#6c757d30'\n              : ''\n          }`\n        )\n        .attr('fill', 'none')\n        .attr('stroke-width', width / 250)\n        .attr(\n          'd',\n          path(topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectName]))\n        );\n\n      const handleMouseEnter = (name) => {\n        try {\n          setSelectedRegion(name);\n          setHoveredRegion(name, mapMeta);\n        } catch (err) {\n          console.log('err', err);\n        }\n      };\n\n      function handleClick(d) {\n        d3.event.stopPropagation();\n        if (onceTouchedRegion || mapMeta.mapType === MAP_TYPES.STATE) return;\n        // Disable pointer events till the new map is rendered\n        svg.attr('pointer-events', 'none');\n        g.selectAll('.path-region').attr('pointer-events', 'none');\n        // Switch map\n        changeMap(d.properties[propertyField]);\n      }\n\n      // Reset on tapping outside map\n      svg.attr('pointer-events', 'auto').on('click', () => {\n        if (mapMeta.mapType === MAP_TYPES.COUNTRY) {\n          setSelectedRegion(null);\n          setHoveredRegion('Total', mapMeta);\n        }\n      });\n    },\n    [\n      mapMeta,\n      statistic,\n      mapOption,\n      isCountryLoaded,\n      mapData,\n      setSelectedRegion,\n      setHoveredRegion,\n      changeMap,\n    ]\n  );\n\n  const toTitleCase = (str) => {\n    str = str.toLowerCase().split(' ');\n    for (let i = 0; i < str.length; i++) {\n      str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\n    }\n    return str.join(' ');\n  };\n\n  useEffect(() => {\n    (async () => {\n      const data = await d3.json(mapMeta.geoDataFile);\n      if (statistic && choroplethMap.current) {\n        ready(data);\n        setSvgRenderCount((prevCount) => prevCount + 1);\n      }\n    })();\n  }, [mapMeta.geoDataFile, statistic, ready]);\n\n  useEffect(() => {\n    const highlightRegionInMap = (name) => {\n      const paths = d3.selectAll('.path-region');\n      paths.classed('map-hover', (d, i, nodes) => {\n        const propertyField =\n          'district' in d.properties\n            ? propertyFieldMap['state']\n            : propertyFieldMap['country'];\n        if (name === d.properties[propertyField]) {\n          nodes[i].parentNode.appendChild(nodes[i]);\n          return true;\n        }\n        return false;\n      });\n    };\n    highlightRegionInMap(selectedRegion);\n  }, [svgRenderCount, selectedRegion]);\n\n  return (\n    <div>\n      <div className=\"svg-parent fadeInUp\" style={{animationDelay: '2.5s'}}>\n        <svg\n          id=\"chart\"\n          preserveAspectRatio=\"xMidYMid meet\"\n          ref={choroplethMap}\n        ></svg>\n        {(mapOption === 'recovered' && mapData?.Unknown?.recovered) ||\n        (mapOption === 'deceased' && mapData?.Unknown?.deceased) ? (\n          <div className=\"disclaimer\">\n            <Icon.AlertCircle />\n            {`District-wise ${mapOption} numbers are under reconciliation`}\n          </div>\n        ) : (\n          ''\n        )}\n      </div>\n      <div\n        className=\"svg-parent legend fadeInUp\"\n        style={{animationDelay: '2.5s'}}\n      >\n        <svg\n          id=\"legend\"\n          height=\"65\"\n          preserveAspectRatio=\"xMidYMid meet\"\n          ref={choroplethLegend}\n        ></svg>\n      </div>\n      <svg style={{position: 'absolute', height: 0}}>\n        <defs>\n          <filter id=\"balance-color\" colorInterpolationFilters=\"sRGB\">\n            <feColorMatrix\n              type=\"matrix\"\n              values=\"0.91372549 0 0 0 0.08627451 0 0.91372549 0 0 0.08627451 0 0 0.854901961 0 0.145098039 0 0 0 1 0\"\n            />\n          </filter>\n        </defs>\n      </svg>\n    </div>\n  );\n}\n\nexport default React.memo(ChoroplethMap);\n"]},"metadata":{},"sourceType":"module"}