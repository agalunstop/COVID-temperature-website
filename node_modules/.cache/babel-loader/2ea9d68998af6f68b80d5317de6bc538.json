{"ast":null,"code":"var _jsxFileName = \"/Users/sonalgupta/Documents/research/Weather data/website/covid19india-react/src/components/Charts/allstates.js\";\nimport { defaultOptions, xAxisDefaults, yAxisDefaults } from './chart-defaults';\nimport { getStateName } from '../../utils/commonfunctions';\nimport deepmerge from 'deepmerge';\nimport moment from 'moment';\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\n\nfunction AllStatesChart(props) {\n  const dates = [];\n  const chartReference = React.createRef();\n\n  if (!props.data || props.data.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 12\n      }\n    });\n  }\n\n  const statesData = new Map();\n  props.data.forEach(data => {\n    if (data.status !== 'Confirmed') {\n      return;\n    }\n\n    Object.keys(data).forEach(key => {\n      if (key === 'date') {\n        dates.push(moment(data.date.trim(), 'DD MMM').utcOffset('+05:30'));\n      }\n\n      if (key === 'status' || key === 'date') {\n        return;\n      }\n\n      if (!statesData.has(key)) {\n        statesData.set(key, []);\n      }\n\n      const previousValue = statesData.get(key).length > 0 ? parseInt(statesData.get(key)[statesData.get(key).length - 1]) : 0;\n      const currentValue = data[key] !== '' ? parseInt(data[key]) : 0;\n      statesData.get(key).push(previousValue + currentValue);\n    });\n  });\n  const sortedMap = new Map([...statesData.entries()].sort((a, b) => {\n    return a[1][a[1].length - 1] < b[1][b[1].length - 1] ? 1 : -1;\n  }));\n  const colors = ['#718af0', '#7dd6fa', '#59b3aa', '#9bc26b', '#e5d22f', '#ffb041', '#ff8a66', '#db6b8f', '#bd66cc', '#8e8e8e'];\n  let index = 0;\n  const datasets = [];\n  sortedMap.forEach((data, key) => {\n    if (key === 'tt') {\n      return;\n    }\n\n    if (index >= 10) {\n      return;\n    }\n\n    datasets.push({\n      borderWidth: 2,\n      data: statesData.get(key),\n      borderCapStyle: 'round',\n      pointBackgroundColor: colors[index],\n      label: getStateName(key),\n      borderColor: colors[index],\n      pointHoverRadius: 0.5\n    });\n    index++;\n  });\n  const dataset = {\n    labels: dates,\n    datasets: datasets\n  };\n  const options = deepmerge(defaultOptions, {\n    tooltips: {\n      mode: 'index'\n    },\n    elements: {\n      point: {\n        radius: 0\n      },\n      line: {\n        tension: 0\n      }\n    },\n    legend: {\n      labels: {\n        boxWidth: 20,\n        fontSize: 11\n      }\n    },\n    scales: {\n      yAxes: [deepmerge(yAxisDefaults, {\n        type: 'linear',\n        ticks: {\n          beginAtZero: true,\n          max: undefined,\n          precision: 0\n        },\n        scaleLabel: {\n          display: false,\n          labelString: 'Total Cases'\n        }\n      })],\n      xAxes: [deepmerge(xAxisDefaults, {\n        type: 'time',\n        time: {\n          unit: 'day',\n          tooltipFormat: 'MMM DD',\n          stepSize: 7,\n          displayFormats: {\n            millisecond: 'MMM DD',\n            second: 'MMM DD',\n            minute: 'MMM DD',\n            hour: 'MMM DD',\n            day: 'MMM DD',\n            week: 'MMM DD',\n            month: 'MMM DD',\n            quarter: 'MMM DD',\n            year: 'MMM DD'\n          }\n        },\n        gridLines: {\n          color: 'rgba(0, 0, 0, 0)'\n        }\n      })]\n    }\n  });\n\n  function toggleSelection() {\n    // Get reference of chartInstance and update it\n    const ci = chartReference.current.chartInstance;\n\n    for (let i = 0; i < ci.data.datasets.length; i++) {\n      const meta = ci.getDatasetMeta(i);\n      meta.hidden = meta.hidden === null ? !chartReference.current.chartInstance.data.datasets[i].hidden : null;\n    }\n\n    ci.update();\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"charts-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, props.title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: dataset,\n    options: options,\n    ref: chartReference,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-note\",\n    style: {\n      marginTop: '0px',\n      height: '30px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: toggleSelection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, \"Toggle Selection\")));\n}\n\nexport default AllStatesChart;","map":{"version":3,"sources":["/Users/sonalgupta/Documents/research/Weather data/website/covid19india-react/src/components/Charts/allstates.js"],"names":["defaultOptions","xAxisDefaults","yAxisDefaults","getStateName","deepmerge","moment","React","Line","AllStatesChart","props","dates","chartReference","createRef","data","length","statesData","Map","forEach","status","Object","keys","key","push","date","trim","utcOffset","has","set","previousValue","get","parseInt","currentValue","sortedMap","entries","sort","a","b","colors","index","datasets","borderWidth","borderCapStyle","pointBackgroundColor","label","borderColor","pointHoverRadius","dataset","labels","options","tooltips","mode","elements","point","radius","line","tension","legend","boxWidth","fontSize","scales","yAxes","type","ticks","beginAtZero","max","undefined","precision","scaleLabel","display","labelString","xAxes","time","unit","tooltipFormat","stepSize","displayFormats","millisecond","second","minute","hour","day","week","month","quarter","year","gridLines","color","toggleSelection","ci","current","chartInstance","i","meta","getDatasetMeta","hidden","update","title","marginTop","height"],"mappings":"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","sourcesContent":["import {defaultOptions, xAxisDefaults, yAxisDefaults} from './chart-defaults';\n\nimport {getStateName} from '../../utils/commonfunctions';\n\nimport deepmerge from 'deepmerge';\nimport moment from 'moment';\nimport React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nfunction AllStatesChart(props) {\n  const dates = [];\n  const chartReference = React.createRef();\n\n  if (!props.data || props.data.length === 0) {\n    return <div></div>;\n  }\n\n  const statesData = new Map();\n\n  props.data.forEach((data) => {\n    if (data.status !== 'Confirmed') {\n      return;\n    }\n\n    Object.keys(data).forEach((key) => {\n      if (key === 'date') {\n        dates.push(moment(data.date.trim(), 'DD MMM').utcOffset('+05:30'));\n      }\n\n      if (key === 'status' || key === 'date') {\n        return;\n      }\n\n      if (!statesData.has(key)) {\n        statesData.set(key, []);\n      }\n      const previousValue =\n        statesData.get(key).length > 0\n          ? parseInt(statesData.get(key)[statesData.get(key).length - 1])\n          : 0;\n      const currentValue = data[key] !== '' ? parseInt(data[key]) : 0;\n      statesData.get(key).push(previousValue + currentValue);\n    });\n  });\n\n  const sortedMap = new Map(\n    [...statesData.entries()].sort((a, b) => {\n      return a[1][a[1].length - 1] < b[1][b[1].length - 1] ? 1 : -1;\n    })\n  );\n\n  const colors = [\n    '#718af0',\n    '#7dd6fa',\n    '#59b3aa',\n    '#9bc26b',\n    '#e5d22f',\n    '#ffb041',\n    '#ff8a66',\n    '#db6b8f',\n    '#bd66cc',\n    '#8e8e8e',\n  ];\n\n  let index = 0;\n  const datasets = [];\n  sortedMap.forEach((data, key) => {\n    if (key === 'tt') {\n      return;\n    }\n\n    if (index >= 10) {\n      return;\n    }\n\n    datasets.push({\n      borderWidth: 2,\n      data: statesData.get(key),\n      borderCapStyle: 'round',\n      pointBackgroundColor: colors[index],\n      label: getStateName(key),\n      borderColor: colors[index],\n      pointHoverRadius: 0.5,\n    });\n\n    index++;\n  });\n\n  const dataset = {\n    labels: dates,\n    datasets: datasets,\n  };\n\n  const options = deepmerge(defaultOptions, {\n    tooltips: {\n      mode: 'index',\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n      line: {\n        tension: 0,\n      },\n    },\n    legend: {\n      labels: {\n        boxWidth: 20,\n        fontSize: 11,\n      },\n    },\n    scales: {\n      yAxes: [\n        deepmerge(yAxisDefaults, {\n          type: 'linear',\n          ticks: {\n            beginAtZero: true,\n            max: undefined,\n            precision: 0,\n          },\n          scaleLabel: {\n            display: false,\n            labelString: 'Total Cases',\n          },\n        }),\n      ],\n      xAxes: [\n        deepmerge(xAxisDefaults, {\n          type: 'time',\n          time: {\n            unit: 'day',\n            tooltipFormat: 'MMM DD',\n            stepSize: 7,\n            displayFormats: {\n              millisecond: 'MMM DD',\n              second: 'MMM DD',\n              minute: 'MMM DD',\n              hour: 'MMM DD',\n              day: 'MMM DD',\n              week: 'MMM DD',\n              month: 'MMM DD',\n              quarter: 'MMM DD',\n              year: 'MMM DD',\n            },\n          },\n          gridLines: {\n            color: 'rgba(0, 0, 0, 0)',\n          },\n        }),\n      ],\n    },\n  });\n\n  function toggleSelection() {\n    // Get reference of chartInstance and update it\n    const ci = chartReference.current.chartInstance;\n    for (let i = 0; i < ci.data.datasets.length; i++) {\n      const meta = ci.getDatasetMeta(i);\n      meta.hidden =\n        meta.hidden === null\n          ? !chartReference.current.chartInstance.data.datasets[i].hidden\n          : null;\n    }\n    ci.update();\n  }\n\n  return (\n    <div className=\"charts-header\">\n      <div className=\"chart-title\">{props.title}</div>\n      <div className=\"chart-content\">\n        <Line data={dataset} options={options} ref={chartReference} />\n      </div>\n      <div className=\"chart-note\" style={{marginTop: '0px', height: '30px'}}>\n        <button onClick={toggleSelection}>Toggle Selection</button>\n      </div>\n    </div>\n  );\n}\n\nexport default AllStatesChart;\n"]},"metadata":{},"sourceType":"module"}